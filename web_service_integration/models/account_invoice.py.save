# -*- encoding: UTF-8 -*-
##############################################################################
#
#    Odoo, Open Source Management Solution
#    Copyright (C) 2015-Today Laxicon Solution.
#    (<http://laxicon.in>)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>
#
##############################################################################

from odoo import api, models, fields, _
import xml.etree.cElementTree as ET
from datetime import datetime, timedelta
from lxml import etree
import datetime as dt
import dateutil.parser
from dateutil.tz import gettz
# from datetime import datetime
# import requests
# from suds.client import Client
from dateutil import parser
from odoo.addons.web_service_integration import numero_a_texto
from odoo.addons.web_service_integration.models import credit_note
from odoo.addons.web_service_integration.models import invoice_cancel
#from zeep import Client
import json
from odoo.exceptions import AccessError, UserError, RedirectWarning, ValidationError, Warning
import logging
import base64
import requests
from json import loads
from random import randint
import re

_logger = logging.getLogger(__name__)

class AccountInvoice(models.Model):
    _inherit = 'account.invoice'
    
    #uuid = fields.Char("Numero Autorizacion", readonly=True, states={'draft': [('readonly', False)]})
    #serie = fields.Char("Serie", readonly=True, states={'draft': [('readonly', False)]})
    #numero_dte = fields.Char("Numero DTE", readonly=True, states={'draft': [('readonly', False)]})
    #dte_fecha = fields.Datetime("Fecha Autorizacion", readonly=True, states={'draft': [('readonly', False)]})
    #cae = fields.Text("CAE", readonly=True, states={'draft': [('readonly', False)]})
    #letras = fields.Text("Total Letras", readonly=True, states={'draft': [('readonly', False)]})

    @api.multi
    def action_invoice_open(self):
        # Cambiada para procesar los datos devueltos por WS
        if self.journal_id.is_eface == False:
           return super(AccountInvoice, self).action_invoice_open()
        res = super(AccountInvoice, self).action_invoice_open()
        if self.type == "out_invoice":
           xml_data = self.set_data_for_invoice()
           self.letras = str(numero_a_texto.Numero_a_Texto(self.amount_total))
           uuid, serie, numero_dte, dte_fecha =self.send_data_api(xml_data)
           message = _("Facturacion Electronica: Serie %s  Numero %s") % (serie, numero_dte)
           self.message_post(body=message)
           self.uuid = uuid
           self.serie = serie
           self.numero_dte = numero_dte
           myTime = dateutil.parser.parse(dte_fecha)
           racion_de_6h = timedelta(hours=6)
           myTime = myTime + racion_de_6h
           formato2 = "%Y-%m-%d %H:%M:%S"
           myTime = myTime.strftime(formato2)
           self.dte_fecha = myTime

        if self.type == "out_refund" and self.refund_invoice_id:
           xml_data = credit_note.set_data_for_invoice_credit(self)
           #print ("xml credit note:",xml_data)
           self.letras = str(numero_a_texto.Numero_a_Texto(self.amount_total))
           uuid, serie, numero_dte, dte_fecha =credit_note.send_data_api_credit(self, xml_data)
           message = _("Nota de Credito: Serie %s  Numero %s") % (serie, numero_dte)
           self.message_post(body=message)
           self.uuid = uuid
           self.serie = serie
           self.numero_dte = numero_dte
           myTime = dateutil.parser.parse(dte_fecha)
           racion_de_6h = timedelta(hours=6)
           myTime = myTime + racion_de_6h
           formato2 = "%Y-%m-%d %H:%M:%S"
           myTime = myTime.strftime(formato2)
           self.dte_fecha = myTime

        return res

    @api.multi
    def action_invoice_cancel(self):
        # Cambiada para procesar los datos devueltos por WS
        if self.journal_id.is_eface == False:
           return super(AccountInvoice, self).action_invoice_cancel()
        res = super(AccountInvoice, self).action_invoice_cancel()
        if self.type == "out_invoice":
           xml_data = invoice_cancel.set_data_for_invoice_cancel(self)
           uuid, serie, numero_dte, dte_fecha =invoice_cancel.send_data_api_cancel(self, xml_data)
           message = _("Factura Cancelada: Serie %s  Numero %s") % (serie, numero_dte)
           self.message_post(body=message)
           self.uuid = uuid
           self.serie = serie
           self.numero_dte = numero_dte
           myTime = dateutil.parser.parse(dte_fecha)
           racion_de_6h = timedelta(hours=6)
           myTime = myTime + racion_de_6h
           formato2 = "%Y-%m-%d %H:%M:%S"
           myTime = myTime.strftime(formato2)
           self.dte_fecha = myTime

        if self.type == "out_refund" and self.uuid:
           xml_data = invoice_cancel.set_data_for_invoice_cancel(self)
           uuid, serie, numero_dte, dte_fecha =invoice_cancel.send_data_api_cancel(self, xml_data)
           message = _("Nota de Credito Cancelada: Serie %s  Numero %s") % (serie, numero_dte)
           self.message_post(body=message)
           self.uuid = uuid
           self.serie = serie
           self.numero_dte = numero_dte
           myTime = dateutil.parser.parse(dte_fecha)
           racion_de_6h = timedelta(hours=6)
           myTime = myTime + racion_de_6h
           formato2 = "%Y-%m-%d %H:%M:%S"
           myTime = myTime.strftime(formato2)
           self.dte_fecha = myTime

        return res

    @api.multi
    def set_data_for_invoice(self):

        xmlns = "http://www.sat.gob.gt/dte/fel/0.1.0"
        xsi = "http://www.w3.org/2001/XMLSchema-instance"
        schemaLocation = "http://www.sat.gob.gt/dte/fel/0.1.0"
        version = "0.4"
        ns = "{xsi}"
        DTE= "dte"

        root = ET.Element("{" + xmlns + "}GTDocumento", Version="0.4", attrib={"{" + xsi + "}schemaLocation" : schemaLocation})
        doc = ET.SubElement(root, "{" + xmlns + "}SAT", ClaseDocumento="dte")
        dte = ET.SubElement(doc, "{" + xmlns + "}DTE", ID="DatosCertificados")
        dem = ET.SubElement(dte, "{" + xmlns + "}DatosEmision", ID="DatosEmision")
        fecha_emision = dt.datetime.now(gettz("America/Guatemala")).isoformat()   #dt.datetime.now().isoformat()
        dge = ET.SubElement(dem, "{" + xmlns + "}DatosGenerales", CodigoMoneda="GTQ",  FechaHoraEmision=fecha_emision, Tipo="FACT")
        emi = ET.SubElement(dem, "{" + xmlns + "}Emisor", AfiliacionIVA="GEN", CodigoEstablecimiento="1", CorreoEmisor=self.company_id.email, NITEmisor=self.company_id.vat, NombreComercial=self.company_id.name, NombreEmisor=self.company_id.name)
        dire = ET.SubElement(emi, "{" + xmlns + "}DireccionEmisor")
        ET.SubElement(dire, "{" + xmlns + "}Direccion").text = "4 Avenida 19-26 zona 10"
        ET.SubElement(dire, "{" + xmlns + "}CodigoPostal").text = "01009"
        ET.SubElement(dire, "{" + xmlns + "}Municipio").text = self.company_id.city or "Guatemala"
        ET.SubElement(dire, "{" + xmlns + "}Departamento").text = "Guatemala"
        ET.SubElement(dire, "{" + xmlns + "}Pais").text = "GT"

        if self.partner_id.vat:
           vat = self.partner_id.vat
           vat = re.sub('\ |\?|\.|\!|\/|\;|\:|\-', '', vat)
           vat = vat.upper()
        else:
            vat = "CF"

        #if self.partner_id.vat:
        rece = ET.SubElement(dem, "{" + xmlns + "}Receptor", CorreoReceptor=self.partner_id.email or "", IDReceptor=vat, NombreReceptor=self.partner_id.name)
        direc = ET.SubElement(rece, "{" + xmlns + "}DireccionReceptor")
        ET.SubElement(direc, "{" + xmlns + "}Direccion").text = self.partner_id.street or "Ciudad"
        ET.SubElement(direc, "{" + xmlns + "}CodigoPostal").text = "01009"
        ET.SubElement(direc, "{" + xmlns + "}Municipio").text = "Guatemala"
        ET.SubElement(direc, "{" + xmlns + "}Departamento").text = "Guatemala"
        ET.SubElement(direc, "{" + xmlns + "}Pais").text = "GT"

        #Frases
        fra = ET.SubElement(dem, "{" + xmlns + "}Frases")
        ET.SubElement(fra, "{" + xmlns + "}Frase", TipoFrase="1", CodigoEscenario="2")
        invoice_line = self.invoice_line_ids
        items = ET.SubElement(dem, "{" + xmlns + "}Items")
        tax_in_ex = 1
        cnt = 0
        #LineasFactura
        for line in invoice_line:
            cnt += 1
            p_type = 0
            BoS = "B"
            if line.product_id.type == 'service':
                p_type = 1
                BoS = "S"
            for tax in line.invoice_line_tax_ids:
                if tax.price_include:
                    tax_in_ex = 0

            # Item
            item = ET.SubElement(items, "{" + xmlns + "}Item", BienOServicio=BoS, NumeroLinea=str(cnt))
            if line.invoice_line_tax_ids:
               tax = "IVA"
            else:
                raise UserError(_("Las l√≠neas de Factura deben de llevar impuesto."))
            for imp in line.invoice_line_tax_ids:
                if imp.price_include == True:
                   price_unit = line.price_unit
                else:
                   price_unit = imp.a
            ET.SubElement(item, "{" + xmlns + "}Cantidad").text = str(line.quantity)
            ET.SubElement(item, "{" + xmlns + "}UnidadMedida").text = "UND"
            ET.SubElement(item, "{" + xmlns + "}Descripcion").text = line.name or " "
            ET.SubElement(item, "{" + xmlns + "}PrecioUnitario").text = str(line.price_unit)
            ET.SubElement(item, "{" + xmlns + "}Precio").text = str(line.quantity * line.price_unit)
            ET.SubElement(item, "{" + xmlns + "}Descuento").text = str(round((line.discount * (line.quantity * line.price_unit))/100,2))

            #if line.invoice_line_tax_ids:
            #   tax = "IVA"
            #else:
            #    raise UserError(_("Las l√≠neas de Factura deben de llevar impuesto."))
            impuestos = ET.SubElement(item, "{" + xmlns + "}Impuestos")
            impuesto = ET.SubElement(impuestos, "{" + xmlns + "}Impuesto")
            price_tax = line.price_total - line.price_subtotal
            print("price_subtotal:",line.price_subtotal)
            print("price_total:",line.price_total)
            ET.SubElement(impuesto, "{" + xmlns + "}NombreCorto").text = tax
            ET.SubElement(impuesto, "{" + xmlns + "}CodigoUnidadGravable").text = "1"
            ET.SubElement(impuesto, "{" + xmlns + "}MontoGravable").text = str(round(line.price_subtotal,2))
            ET.SubElement(impuesto, "{" + xmlns + "}MontoImpuesto").text = str(round(price_tax,2))
            ET.SubElement(item, "{" + xmlns + "}Total").text = str(round(line.price_total,2))
        #Totales
        totales = ET.SubElement(dem, "{" + xmlns + "}Totales")
        timpuestos = ET.SubElement(totales, "{" + xmlns + "}TotalImpuestos")
        tim = ET.SubElement(timpuestos, "{" + xmlns + "}TotalImpuesto", NombreCorto="IVA", TotalMontoImpuesto=str(round(self.amount_tax,2)))
        ET.SubElement(totales, "{" + xmlns + "}GranTotal").text = str(round(self.amount_total,2))

        #Adenda
        ade = ET.SubElement(doc, "{" + xmlns + "}Adenda")
        #ET.SubElement(ade, "NITEXTRANJERO").text = "111111"
        ET.SubElement(ade, "CAJERO").text = "1"
        ET.SubElement(ade, "VENDEDOR").text = "1"
        ET.SubElement(ade, "Subtotal").text = str(round(self.amount_untaxed,2))
        ET.SubElement(ade, "Fuente").text = self.user_id.name
        date_due = self.date_due
        date_due = datetime.strptime(date_due, '%Y-%m-%d')
        #print(date_due)
        #print(date_due.date) 
        #racion_de_6h = timedelta(hours=6)
        #print(type(racion_de_6h))
        #date_due = date_due - racion_de_6h
        formato2 = "%d-%m-%Y"
        date_due = date_due.strftime(formato2)
        ET.SubElement(ade, "FechaVencimiento").text = date_due

        cont = ET.tostring(root, encoding="UTF-8", method='xml')
        buscar = "ns0"
        rmpl = "dte"
        cont = cont.decode('utf_8')
        cont = cont.replace(buscar, rmpl)
        #print ("final:",cont)
        cont = cont.encode('utf_8')
        #print ("finasl:",cont)
        dat = base64.b64encode(cont)
        return dat

    @api.multi
    def send_data_api(self, xml_data=None):
        api = self.env['api.data.configuration'].search([])[0]
        if not api:
            return False
        XML = xml_data
        #user = 'PITAYA'
        #key = 'ad53db545cf573cf16fc4030fb242fb6'
        #url = 'https://signer-emisores.feel.com.gt/sign_solicitud_firmas/firma_xml'
        url = api.url_firma
        ran = str(randint(1,99999))
        data_send = {'llave': api.key_firma,
                     'archivo': XML,
                     'codigo': ran,
                     'alias': api.user,
                     'es_anulacion': 'N'}

        response = requests.request("POST", url, data=data_send)
        #print ("response", response.text)
        rp = response.json()

        dt = rp["archivo"]
        #url = "https://testing.ingface.net:8443/fel/certificacion/dte/"
        #url = "https://certificador.feel.com.gt/fel/certificacion/dte"
        url = api.url_certificado  
        payload = {
            'nit_emisor': self.company_id.vat,
            'correo_copia': self.company_id.email,
            'xml_dte': dt,
            }

        ident = str(randint(1111111,9999999))
        headers = {
            'usuario': api.user,
            'llave': api.key_certificado,
            'content-type': "application/json",
            'identificador': ident,
            }
        #print ("AQUI")
        response = requests.request("POST", url, data=json.dumps(payload), headers=headers)

        #print(response.text)
        rp = response.json()
        uuid = rp["uuid"]
        serie = rp["serie"]
        numero_dte = rp["numero"]
        dte_fecha = rp["fecha"]
        cantidad_errores = rp["cantidad_errores"]
        descripcion_errores = rp["descripcion_errores"]
        #resulta_codigo = tree_res.find('ERROR').attrib['Codigo']
        #resulta_descripcion = tree_res.find('ERROR').text
        if cantidad_errores>0:
            raise UserError(_("You cannot validate an invoice\n Error No:%s\n %s."% (cantidad_errores,descripcion_errores)))
            #message = _("You cannot validate an invoice\n Error No:%s\n %s.") % (cantidad_errores,descripcion_errores)
            #self.message_post(body=message)
            #raise UserError(_("En este momento no se puede enviar la factura al servicio web.\n Favor de contactar al administrador."))
        return uuid, serie, numero_dte, dte_fecha
